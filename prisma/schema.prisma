generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Employee {
  id                  String       @id
  fullName            String
  email               String       @unique
  immediateSupervisor String?
  phone               String?
  division            String?
  department          String?
  section             String?
  group               String?
  locationCategory    String
  location            String
  jobTitle            String
  category            String // Employee Category
  jobRole             String
  buildings           Building[]
  attencances         Attendance[]
  roles               Role[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  deletedAt           DateTime?

  @@index([fullName])
  @@index([email])
}

model Building {
  id          String       @id @default(cuid())
  name        String // e.g., "Legahar-Head Quarter", "Head Office"
  latitude    Float // For geofencing
  longitude   Float // For geofencing
  radius      Float // Radius in meters for geofencing
  employees   Employee[] // Users assigned to this location (many-to-many)
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime? // Soft delete

  @@index([name])
}

model Attendance {
  id         String    @id @default(cuid())
  checkIn    DateTime
  checkOut   DateTime?
  status     Status    @default(CHECKED_IN)
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?
  building   Building  @relation(fields: [buildingId], references: [id])
  buildingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

enum Status {
  CHECKED_IN
  EARLY_LEAVE
  PRESENT
  LATE
  ABSENT
  AUTO_CHECKOUT
}

model Role {
  id        String     @id @default(cuid())
  name      String     @unique
  abilities Ability[]
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  @@index([name])
}

model Ability {
  id        String    @id @default(cuid())
  action    String[] // Example: "create", "read", "update", "delete" (single action per ability for simplicity)
  subject   String // Example: "Attendance", "Location"
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([action, subject, roleId])
}
