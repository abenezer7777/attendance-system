generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  employeeId        String       @unique
  fullName          String
  // name              String
  email             String       @unique
  password          String
  // role              Role
  role              Role         @relation(fields: [roleId], references: [id])
  roleId            String
  attendances       Attendance[]
  assignedLocations Location[]
  division          String?
  department        String?
  section           String?
  locationCategory  String
  location          String
  jobTitle          String
  jobRole           String
  mobile            String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
}

// model User {
//   id                String       @id @default(cuid())
//   name              String
//   email             String       @unique
//   password          String
//   role              Role         @default(EMPLOYEE)
//   department        String?
//   createdAt         DateTime     @default(now())
//   updatedAt         DateTime     @updatedAt
//   attendances       Attendance[]
//   assignedLocations Location[]
// }

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  abilities Ability[]
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Ability {
  id        String    @id @default(cuid())
  action    String[] // Example: "create", "read", "update", "delete"
  subject   String // Example: "Letter", "Organization"
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Location {
  id          String       @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  radius      Float // in meters
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  attendances Attendance[]
}

model Attendance {
  id         String    @id @default(cuid())
  userId     String
  locationId String
  checkIn    DateTime
  checkOut   DateTime?
  status     Status    @default(PRESENT)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])
}

// enum Role {
//   ADMIN
//   MANAGER
//   EMPLOYEE`
// }

enum Status {
  PRESENT
  LATE
  ABSENT
  AUTOCHECKOUT
}
