generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  employeeId        String       @unique
  fullName          String
  email             String       @unique
  password          String
  role              Role         @relation(fields: [roleId], references: [id])
  roleId            String
  attendances       Attendance[]
  assignedLocations Location[]   // Existing many-to-many relation to Location
  organizationUnit  OrganizationUnit @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String      // Foreign key to OrganizationUnit
  supervisor        String
  jobTitle          String       // e.g., "Accountant"
  jobRole           String       // e.g., "Financial Analyst"
  mobile            String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
}
model OrganizationUnit {
  id        String             @id @default(cuid())
  name      String             // e.g., "Finance", "IT", "Accounts Payable"
  type      OrgUnitType        // Indicates whether it's a division, department, or section
  parentId  String?            // Optional parent ID for hierarchy
  parent    OrganizationUnit?  @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children  OrganizationUnit[] @relation("OrgUnitHierarchy") // Child units (e.g., sections under a department)
  users     User[]             // Users associated with this unit
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?          // Optional soft delete field
}

enum OrgUnitType {
  DIVISION
  DEPARTMENT
  SECTION
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  abilities Ability[]
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Ability {
  id        String    @id @default(cuid())
  action    String[] // Example: "create", "read", "update", "delete"
  subject   String // Example: "Letter", "Organization"
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Location {
  id          String       @id @default(cuid())
  name        String
  latitude    Float
  longitude   Float
  radius      Float // in meters
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  attendances Attendance[]
}

model Attendance {
  id         String    @id @default(cuid())
  userId     String
  locationId String
  checkIn    DateTime
  checkOut   DateTime?
  status     Status    @default(PRESENT)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])
}

enum Status {
  EARLYLEAVE
  PRESENT
  LATE
  ABSENT
  AUTOCHECKOUT
}

///////////////////////////////////////////////////////////////////////////////////////////////////
model Location {
  id              String             @id @default(cuid())
  name            String
  category        LocationCategory
  latitude        Float
  longitude       Float
  radius          Float // in meters
  organizationUnit OrganizationUnit  @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?
  users           User[]
  attendances     Attendance[]

  @@index([name, category, organizationUnitId])
}

enum LocationCategory {
  SR
  NER
  NAEZ
  HEAD_QUARTER
  HEAD_OFFICE
}

model User {
  id                String       @id @default(cuid())
  employeeId        String       @unique
  fullName          String
  email             String       @unique
  password          String
  role              Role         @relation(fields: [roleId], references: [id])
  roleId            String
  attendances       Attendance[]
  assignedLocations Location[]
  organizationUnit  OrganizationUnit @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String
  supervisor        User?        @relation("SupervisorEmployee", fields: [supervisorId], references: [id])
  supervisorId      String?
  jobTitle          String
  jobRole           String
  mobile            String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
}

model OrganizationUnit {
  id        String             @id @default(cuid())
  name      String
  type      OrgUnitType
  parentId  String?
  parent    OrganizationUnit?  @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children  OrganizationUnit[] @relation("OrgUnitHierarchy")
  users     User[]
  locations Location[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?

  @@index([name, type])
}

enum OrgUnitType {
  DIVISION
  DEPARTMENT
  SECTION
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @default(cuid())
  employeeId        String       @unique
  fullName          String
  email             String       @unique
  password          String
  role              Role         @relation(fields: [roleId], references: [id])
  roleId            String
  attendances       Attendance[]
  assignedLocations Location[]   // Many-to-many relation to Location
  organizationUnit  OrganizationUnit @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String      // Foreign key to OrganizationUnit
  supervisor        User?        @relation("SupervisorEmployee", fields: [supervisorId], references: [id])
  supervisorId      String?      // Foreign key to supervisor (another User)
  jobTitle          String       // e.g., "Accountant"
  jobRole           String       // e.g., "Financial Analyst"
  mobile            String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?

  @@index([employeeId, email, organizationUnitId])
}

model OrganizationUnit {
  id        String             @id @default(cuid())
  name      String             // e.g., "Finance", "IT", "Accounts Payable"
  type      OrgUnitType        // Indicates whether it's a division, department, or section
  parentId  String?            // Optional parent ID for hierarchy
  parent    OrganizationUnit?  @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children  OrganizationUnit[] @relation("OrgUnitHierarchy") // Child units (e.g., sections under a department)
  users     User[]             // Users associated with this unit
  locations Location[]         // Locations associated with this unit (e.g., offices)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?          // Optional soft delete field

  @@index([name, type])
}

enum OrgUnitType {
  DIVISION
  DEPARTMENT
  SECTION
}

model Role {
  id        String    @id @default(cuid())
  name      String    @unique
  abilities Ability[]
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([name])
}

model Ability {
  id        String    @id @default(cuid())
  action    String[]    // Example: "create", "read", "update", "delete" (single action per ability for simplicity)
  subject   String    // Example: "Attendance", "Location"
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([action, subject, roleId])
}

model Location {
  id              String             @id @default(cuid())
  name            String             // e.g., "Shashemene 2", "Head Office"
  category        LocationCategory   // e.g., "Service Region (SR)", "Head Quarter"
  latitude        Float              // For geofencing
  longitude       Float              // For geofencing
  radius          Float              // Radius in meters for geofencing
  organizationUnit OrganizationUnit  @relation(fields: [organizationUnitId], references: [id])
  organizationUnitId String          // Links to the organizational unit (e.g., division, department)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  deletedAt       DateTime?          // Soft delete
  users           User[]             // Users assigned to this location (many-to-many)
  attendances     Attendance[]       // Attendance records at this location

  @@index([name, category, organizationUnitId])
}

enum LocationCategory {
  SR           // Service Region
  NER          // North East Region
  NAEZ         // North East Zone
  HEAD_QUARTER // Head Quarter
  HEAD_OFFICE  // Head Office
  // Add more categories as needed based on the ERP data
}

model Attendance {
  id         String    @id @default(cuid())
  userId     String
  locationId String
  checkIn    DateTime
  checkOut   DateTime?
  status     Status    @default(PRESENT)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  location   Location  @relation(fields: [locationId], references: [id])

  @@index([userId, locationId, checkIn])
}

enum Status {
  EARLYLEAVE
  PRESENT
  LATE
  ABSENT
  AUTOCHECKOUT
}